.clearfix {
    display: block;
    *zoom: 1; 
    &:after {
        content: ".";
        display: block;
        clear: both;
        visibility: hidden;
        line-height: 0;
        height: 0;
    }
    html[xmlns] & {
        display: block;
    }
    * html & {
        height: 1%;
    }
}

.gradient (@color: #F5F5F5, @start: #EEE, @stop: #FFF) {
    background: @color;
    background: -webkit-gradient(linear,
                                 left bottom,
                                 left top,
                                 color-stop(0, @start),
                                 color-stop(1, @stop));
    background: -ms-linear-gradient(bottom,
                                    @start,
                                    @stop);
    background: -moz-linear-gradient(center bottom,
                                     @start 0%,
                                     @stop 100%);
    background: -o-linear-gradient(@stop,
                                 @start);
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",@stop,@start));
}

.bw-gradient (@color: #F5F5F5, @start: 0, @stop: 255) {
    background: @color;
    background: -webkit-gradient(linear,
                                 left bottom,
                                 left top,
                                 color-stop(0, rgb(@start,@start,@start)),
                                 color-stop(1, rgb(@stop,@stop,@stop)));
    background: -ms-linear-gradient(bottom,
                                    rgb(@start,@start,@start) 0%,
                                    rgb(@stop,@stop,@stop) 100%);
    background: -moz-linear-gradient(center bottom,
                                     rgb(@start,@start,@start) 0%,
                                     rgb(@stop,@stop,@stop) 100%);
    background: -o-linear-gradient(rgb(@stop,@stop,@stop),
                                 rgb(@start,@start,@start));
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",rgb(@stop,@stop,@stop),rgb(@start,@start,@start)));
}

.opacity (@opacity: 0.5) {
    -moz-opacity: @opacity;
    -khtml-opacity: @opacity;
    -webkit-opacity: @opacity;
    opacity: @opacity;
    @opperc: @opacity * 100;
    -ms-filter: ~"progid:DXImageTransform.Microsoft.Alpha(opacity=@{opperc})";
    filter: ~"alpha(opacity=@{opperc})";
}

.transition-duration (@duration: 0.2s) {
    -moz-transition-duration: @duration;
    -webkit-transition-duration: @duration;
    -o-transition-duration: @duration;
    transition-duration: @duration;
}

.transform (...) {
    -webkit-transform: @arguments;
    -moz-transform: @arguments;
    -o-transform: @arguments;
    -ms-transform: @arguments;
    transform: @arguments;
}

.rotation (@deg:5deg){
    .transform(rotate(@deg));
}

.scale (@ratio:1.5){
    .transform(scale(@ratio));
}

.transition (@duration:0.2s, @ease:ease-out) {
    -webkit-transition: all @duration @ease;
    -moz-transition: all @duration @ease;
    -o-transition: all @duration @ease;
    transition: all @duration @ease;
}

.box-shadow (@arguments) {
    -webkit-box-shadow: @arguments;
    -moz-box-shadow: @arguments;
    box-shadow: @arguments;
}

.box-sizing (@sizing: border-box) {
    -ms-box-sizing: @sizing;
    -moz-box-sizing: @sizing;
    -webkit-box-sizing: @sizing;
    box-sizing: @sizing;
}

.user-select (@argument: none) {
    -webkit-user-select: @argument;
    -moz-user-select: @argument;
    -ms-user-select: @argument;
    user-select: @argument;
}

.translate (@x:0, @y:0) {
    .transform(translate(@x, @y));
}

.background-clip (@argument: padding-box) {
    -moz-background-clip: @argument;
    -webkit-background-clip: @argument;
    background-clip: @argument;
}

.font-size (@sizeValue: 1) {
    @remValue: @sizeValue;
    @pxValue: (@sizeValue * 10);
    font-size: ~"@{pxValue}px"; 
    font-size: ~"@{remValue}rem";
}

.line-height (@sizeValue: 1) {
    @remValue: @sizeValue;
    @pxValue: (@sizeValue * 10);
    line-height: ~"@{pxValue}px"; 
    line-height: ~"@{remValue}rem";
}

.letter-spacing (@sizeValue: 1) {
    @remValue: @sizeValue;
    @pxValue: (@sizeValue * 10);
    letter-spacing: ~"@{pxValue}px"; 
    letter-spacing: ~"@{remValue}rem";
}

.border-radius (@radius: 5px) {
    -webkit-border-radius: @radius;
    -moz-border-radius: @radius;
    -ms-border-radius: @radius;
    -o-border-radius: @radius;
    border-radius: @radius;
}

.span-width (@columns, @gutter, @paddring, @maxColumns) {
    @one_col: (100% - (@gutter * (@maxColumns - 1))) / @maxColumns;
    width:(@one_col * @columns) + (@gutter * (@columns - 1));
    padding:@paddring;
    margin-left:@gutter;
}

.columns (@columns: 12, @gutter: 0, @padding: 0, @row: ~".row") {
    @columnCount: @columns;
    @nthColumn: @columns + 1;
    @nthSelector: ~":nth-child(@{columns}n+@{nthColumn})";

    @{row} {
        &:extend(.clearfix all);
        > .col {
            float: left;
            padding: @padding;
            margin-left: @gutter;
            margin-bottom: @gutter;
            .box-sizing();
            .background-clip(padding-box);
            &:first-child,
            &@{nthSelector} {
                margin-left: 0;
            }
        }
        
        /////////////////////////////////////////////////////////////////
        // Span-mixin that prints the right amount of spans (@columns) //
        /////////////////////////////////////////////////////////////////
        
        .span-mixin (@columns, @gutter, @padding, @columnCount) when (@columns > 0) {
            @class: ~".span-@{columns}";
            @aliasClass: ~".span@{columns}";
            > @{class},
            > @{aliasClass} { .span(@columns, @gutter, @padding, @columnCount); }
            .span-mixin(@columns - 1, @gutter, @padding, @columnCount);
        }
        
        
        ////////////////////////
        // Span when not 100% //
        ////////////////////////
        
        .span (@columns, @gutter, @padding, @columnCount) when (@columns < @columnCount) {
            @one_col: (100% - (@gutter * (@columnCount - 1))) / @columnCount;
            width:(@one_col * @columns) + (@gutter * (@columns - 1));
            margin-left:@gutter;
        }

        
        ////////////////////
        // Span when 100% //
        ////////////////////
        
        .span (@columns, @gutter, @padding, @columnCount) when (@columns = @columnCount) {
            width: 100%;
            margin-left: 0;
        }

        .span-mixin(@columns, @gutter, @padding, @columnCount);

    }
}